@page "/loginpage"

@using SapirProductionFloorManagment.Shared.Authentication___Autherization;
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigatonManager
@inject HttpClient http


<AuthorizeView>
    <NotAuthorized>
        <div class="container">
    <div class="card">
        <h1 class="card-title">Welcome</h1>
        <small class="card-subtitle">Please fill your details to enter the system</small>
        <label for="username">Worker ID</label>
        <div class="card-input-container username">
            <input @bind="Userdata.FullName" type="text" placeholder="@PlaceHolder" id="id">
        </div>
        <label for="password">Password</label>
        <div class="card-input-container password">
            <input @bind="Userdata.Password" type="password" placeholder="Enter your password" id="password">
        </div>
        <button @onclick="LoginUser" style="background:#2c7ae5" class="card-button">Sign In</button>
    </div>
</div>
    </NotAuthorized>
    <Authorized>
        Welcome @Userdata.FullName!
    </Authorized>
</AuthorizeView>




@code
{

    //relevant

    private User Userdata { get; set; } = new();

    [Parameter]
    public string? PlaceHolder { get; set; } = "Enter your worker name";

    private async Task LoginUser()
    {
        using var loginRespose = await http.PostAsJsonAsync("login/getloginrequset", Userdata);

        if (loginRespose.IsSuccessStatusCode)
        {
            var userSession = await loginRespose.Content.ReadFromJsonAsync<UserSession>();
            var custAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
            await custAuthStateProvider.UpdateAuthenticationState(userSession);
            StateHasChanged();

            //add logic if user is unathorized

        }

    }


}

