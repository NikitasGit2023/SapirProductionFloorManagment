@page "/dailyprogram"
@inject IToastService toastService
@inject HttpClient Http
@inherits TableBase

<BlazoredToasts></BlazoredToasts>

<div class="d-flex flex-column mb-3">
    <div class="p-2">
        <h2>Daily Work Plan</h2>
    </div>
</div>


            <div class="d-flex flex-column mb-3">
                <div class="p-2">
                    <div class="d-flex flex-row mb-3">

                        <div class="d-flex flex-row mb-3">
                            <div class="p-2">
                                <RadzenButton Click="RefreshDailyProgram" Text="Recalculate" Icon="refresh" ButtonStyle="ButtonStyle.Primary" />
                            </div>
                            <div class="p-2" style="font-weight:bolder; margin-top:10px;">
                                Last Update: @lastUpdatedAt
                            </div>
                        </div>
                    </div>

                </div>

                <div class="p-2">

                    <RadzenStack Visible="true" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-sm-12">
                        <RadzenLabel Text="Select Line" Component="LinesFilter" />
                        <RadzenDropDown @bind-Value="selectedLineName" Placeholder="General" Change="FilterLinesTable" TValue="string" Data="linesName" Style="width: 100%; max-width: 400px;" Name="LinesFilter" />
                    </RadzenStack>

                    <div class="lines-table" style="width:100%">
                        <WorkPlanTable @ref="workPlanTable"
                                       Data="linesWorkPlan"
                                       IsCrudFrozen="false"
                                       IsNewRowCanAdded="false"                                      
                                       IsVisible="true" />
                    </div>

                </div>
            </div>

    

    


@code 
{
    private DateTime lastUpdatedAt = DateTime.Now;
    private List<WorkOrder> workOrders = new();
    private List<LineWorkPlan> linesWorkPlan = new();
    private List<LineWorkPlan> filteredWorkPlan = new();
    private List<LineWorkPlan> unfilteredWorkPlan = new();
    private WorkPlanTable workPlanTable = new();
    private string selectedLineName = string.Empty;
    private List<string?> linesName = new();


    protected override async Task OnInitializedAsync()
    {
        await AskForLineNames();
        await AskForLinesWorkPlan();
        await ChekcWhenWorkPlanLastUpdated();

        unfilteredWorkPlan = linesWorkPlan.OrderBy(e => e.StartWork).ToList();
        StateHasChanged();
    }


    private void FilterLinesTable(object e)
    {
        linesWorkPlan = unfilteredWorkPlan;
        var lineNum = (string)e;

        if (lineNum == string.Empty)
        {
            linesWorkPlan = unfilteredWorkPlan;
            return;
        }

        // Order by StartWork ascending (lowest to highest)
        filteredWorkPlan = linesWorkPlan.Where(e => e.RelatedToLine == lineNum).ToList();
        linesWorkPlan = filteredWorkPlan.OrderBy(e => e.StartWork).ToList();
        StateHasChanged();
    }


    private async Task AskForLinesWorkPlan()
    {
        try
        {
            using var request = await Http.GetAsync("dailyprogram/getworkplans");
            var json = await request.Content.ReadFromJsonAsync<List<LineWorkPlan>>();
            linesWorkPlan = json;

            if (selectedLineName == string.Empty)
            {
                linesWorkPlan = linesWorkPlan.Where(e => e.StartWork != null).ToList();
                return;
            }

            // Order by StartWork ascending (lowest to highest)
            linesWorkPlan = linesWorkPlan
                .Where(e => e.StartWork != null && e.RelatedToLine == selectedLineName)
                .OrderBy(e => e.StartWork)
                .ToList();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }


    private async Task AskForLineNames()
    {
        try
        {
            using var request = await Http.GetAsync("dailyprogram/getlinesname");
            var json = request.Content.ReadFromJsonAsync<List<string>>();
            linesName = json.Result;

        }catch(Exception ex)
        {

            toastService.ShowError(ex.Message);
        }

    }


    private async Task RefreshDailyProgram()
    {
        lastUpdatedAt = DateTime.Now;
        await AskForLinesWorkPlan();
        await PostLastUpdatedWorkPlansCalculation(lastUpdatedAt);
        StateHasChanged();
    }


    private async Task ChekcWhenWorkPlanLastUpdated()
    {
        try
        {
            using var requset = await Http.GetAsync("dailyprogram/getlastworkplancalculation");
            lastUpdatedAt =  requset.Content.ReadFromJsonAsync<DateTime>().Result;

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }


    private async Task PostLastUpdatedWorkPlansCalculation(DateTime newUpdateTime)
    {
        try
        {
            
            var formattedDateTime = newUpdateTime.ToString("o");
            var response = await Http.PostAsJsonAsync("dailyprogram/setlastWorkplancalculation", formattedDateTime);

            if (!response.IsSuccessStatusCode)
            {
                toastService.ShowError($"Error: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }





}
