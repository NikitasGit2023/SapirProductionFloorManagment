@page "/dailyprogram"
@inject IToastService toastService
@inject HttpClient Http
@inherits TableBase


<div class="d-flex flex-column mb-3">
    <div class="p-2">
        <h2>Work plan</h2>
    </div>
</div>


 


    <div class="d-flex flex-column mb-3">
    <div class="p-2">
        <div class="d-flex flex-row mb-3">

            <div class="d-flex flex-row mb-3">
                <div class="p-2">
                    <button @onclick="() => RefreshWeeklyProgram()" class="btn btn-primary">Calc Program</button>
                </div>
                <div class="p-2" style="font-weight:bolder; margin-top:10px;">
                    Last Update: @lastUpdatedAt
                </div>
            </div>
        </div>

    </div>
    
    <div class="p-2">

         <RadzenStack Visible="true" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-sm-12">
            <RadzenLabel Text="Select Line" Component="LinesFilter" />
            <RadzenDropDown Placeholder="General" Change="FilterLinesTable" TValue="string" Data="linesName" Style="width: 100%; max-width: 400px;" Name="LinesFilter" />
        </RadzenStack>

        <div class="lines-table" style="width:100%">
            <WorkPlanTable @ref="workPlanTable"
                                Data="linesWorkPlan"
                                IsCrudFrozen="false"
                                IsNewRowCanAdded="false"
                                IsVisible="true" />
        </div>
 
    </div>
</div>


@code 
{
    private string lastUpdatedAt = string.Empty;
    private List<WorkOrder> workOrders = new();
    private List<LineWorkPlan> linesWorkPlan = new();
    private List<LineWorkPlan> filteredWorkPlan = new();
    private List<LineWorkPlan> unfilteredWorkPlan = new();
    private WorkPlanTable workPlanTable = new();
    private string selectedLineName = string.Empty;
    private List<string?> linesName = new();


    protected override async Task OnInitializedAsync()
    {
        await AskForLineNames();
        await AskForLinesScedule();
        await RefreshWeeklyProgram();

        unfilteredWorkPlan = linesWorkPlan;
        StateHasChanged();
    }

    private void FilterLinesTable(object e)
    {
        linesWorkPlan = unfilteredWorkPlan;
        var lineNum = (string)e;

        if (lineNum == string.Empty)
        {
            linesWorkPlan = unfilteredWorkPlan;
            return;
        }

        filteredWorkPlan = linesWorkPlan.Where(e => e.RelatedToLine == lineNum).ToList();
        linesWorkPlan = filteredWorkPlan;
        StateHasChanged();
    }

    private async Task AskForLinesScedule()
    {
        try
        {
            using var request = await Http.GetAsync("dailyprogram/getexistedlinesscedule");
            var json = request.Content.ReadFromJsonAsync<List<LineWorkPlan>>();
            linesWorkPlan = json.Result;
            linesWorkPlan = linesWorkPlan.Where(e => e.StartWork != null).ToList();

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }

    }

    private async Task AskForLineNames()
    {
        try
        {
            using var request = await Http.GetAsync("dailyprogram/getlinesname");
            var json = request.Content.ReadFromJsonAsync<List<string>>();
            linesName = json.Result;

        }catch(Exception ex)
        {

            toastService.ShowError(ex.Message);
        }
        
    }

    private async Task RefreshWeeklyProgram()
    {
        lastUpdatedAt = DateTime.Now.ToString();
        await AskForLinesScedule();
        StateHasChanged();
    }

}
