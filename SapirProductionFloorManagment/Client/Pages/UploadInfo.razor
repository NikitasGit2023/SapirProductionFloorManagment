@page "/uploadinfo"
@inject HttpClient Http
@inject IToastService toastService


@using OfficeOpenXml
@using System.Data
@using System.IO
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel


<h3>Upload Information</h3>
<BlazoredToasts></BlazoredToasts>


<div class="d-flex flex-row-reverse">
            <div class="p-2">
                <InputFile OnChange="@ImportXlsxFile"></InputFile>
            </div>
            <div class="p-2">
                <AuthorizeView Roles="Developer">
                    <Authorized>
                        <RadzenButton Click="DropOrdersTable" ButtonStyle="ButtonStyle.Danger" Text="Reset" />
                    </Authorized>
                    <NotAuthorized>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
          @*   <div class="p-2"><RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="grid_on" Text="Export XLS" /></div> *@
</div>




<div class="orders-table">
    <WorkOrdersTable @ref="workOrdersTable"
        Data="workOrders" 
        IsCrudFrozen="true"/>
</div>


@code {

    private List<WorkOrder> workOrders = new();
    private WorkOrdersTable workOrdersTable = new();


    protected override async Task OnInitializedAsync()
    {
        await AskForGetExistedOrders();
        workOrdersTable.RefreshTable();

    }


    //not used
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
        }
    }

    private async Task AskForGetExistedOrders()
    {
        try
        {
            using var request = await Http.GetAsync("uploadinfo/getexistedworkorders");
            var response = await request.Content.ReadFromJsonAsync<List<WorkOrder>>();
            workOrders = response.OrderBy(e => e.Priority).ThenBy(e => e.DeadLineDateTime).ToList();

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);

        }

    }

    private async Task ImportXlsxFile(InputFileChangeEventArgs e)
    {
        try
        {
            using (var fileStream = e.File.OpenReadStream())
            using (var ms = new MemoryStream())
            {
                await fileStream.CopyToAsync(ms);
                ms.Position = 0;

                var xxwb = new XSSFWorkbook(ms);
                var sheet = xxwb.GetSheetAt(0);


                for (var i = sheet.FirstRowNum + 1; i <= sheet.LastRowNum; i++)
                {
                    var row = sheet.GetRow(i);
                    if (row == null) continue;

                    var workOrder = new WorkOrder();


                    for (var j = row.FirstCellNum; j < row.LastCellNum; j++)
                    {
                        var cell = row.GetCell(j);
                        if (cell == null) continue;


                        switch (cell.CellType)
                        {
                            //if string
                            case CellType.String:
                                var cellValue = cell.ToString();

                                if (j == 0) workOrder.WorkOrderSN = cellValue;
                                else if (j == 1) workOrder.ProductDesc = cellValue;
                                else if (j == 3) workOrder.Comments = cellValue;


                                break;
                            case CellType.Numeric:
                                if (DateUtil.IsCellDateFormatted(cell))
                                {
                                    workOrder.DeadLineDateTime = (DateTime)cell.DateCellValue;
                                }
                                else
                                {
                                    // if numeric
                                    if (j == 2) workOrder.QuantityInKg = (int)cell.NumericCellValue;
                                    else if (j == 4) workOrder.OptionalLine1 = cell.ToString();
                                    else if (j == 5) workOrder.OptionalLine2 = cell.ToString();
                                    else if (j == 6) workOrder.Priority = (int)cell.NumericCellValue;
                                    else if (j == 8) workOrder.SizeInMicron = (int)cell.NumericCellValue;
                                }
                                break;
                        }
                    }
                    if (workOrders.Contains(workOrder) || string.IsNullOrEmpty(workOrder.WorkOrderSN))
                    {
                        continue;
                    }
                    else
                        workOrders.Add(workOrder);

                }

                workOrdersTable.RefreshTable();
                StateHasChanged();
                await AskForUploadInfoRequset(workOrders);
                await AskForSettigDataToRelatedTables(workOrders);

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);

        }
        
    }

    private async Task AskForUploadInfoRequset(List<WorkOrder> info)
    {
        try
        {
            using var request = await Http.PostAsJsonAsync("uploadinfo/postworkorderstable", info);

        }catch(Exception ex)
        {
            toastService.ShowError(ex.Message);  
        }

    }

    private async Task AskForSettigDataToRelatedTables(List<WorkOrder> workOrders)
    {
        try
        {
            using var request = await Http.PostAsJsonAsync("uploadinfo/postdatatorelatedtables", workOrders);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);

        }
    }


    //for developers only
    private async Task DropOrdersTable()
    {
        using var requset = await Http.GetAsync("uploadinfo/dropallorders");
        await AskForGetExistedOrders();
        workOrdersTable.RefreshTable();
        StateHasChanged();
    }

    


}
  
