@page "/uploadinfo"

@inject HttpClient Http


@using SapirProductionFloorManagment.Client.Shared.Tables
@using SapirProductionFloorManagment.Client.Shared.Buttons
@using SapirProductionFloorManagment.Client.Shared
@using OfficeOpenXml
@using System.Data
@using System.IO
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel

@* @inject WorkOrdersTable table *@

<h3>Upload Information</h3>




<div class="d-flex align-items-end flex-column mb-3" style="height: 20px;">
    <div class="p-2">
        <div class="d-flex flex-row mb-3">
            <div class="p-2">
                <InputFile OnChange="@ImportXlsxFile"></InputFile>
            </div>
          @*   <div class="p-2"><RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="grid_on" Text="Export XLS" /></div> *@
        </div>
    </div>
</div>


<TablesSwitcher @ref="tablesSwitcher" Switchers="keyValuePairs" OnClick="SwitchToTable"/>


<RadzenStack Visible="@keyValuePairs["Lines"]" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-sm-12">
    <RadzenLabel Text="Select Line" Component="LinesFilter" />
    <RadzenDropDown Change="FilterLinesTable" TValue="string" Data="linesName" Style="width: 100%; max-width: 400px;" Name="LinesFilter" />
</RadzenStack>

<div class="orders-table">
    <WorkOrdersTable @ref="workOrdersTable"
        IsVisible="@keyValuePairs["Orders"]"
        Data="workOrders" 
        IsCrudFrozen="true"/>
</div>


<div class="lines-table" style="width:100%">
    <LinesScheduleTable
           @ref="lineSchedulesTable"
          IsDemoShowed="true"
          Data = "linesSchedule"
          IsVisible="@keyValuePairs["Lines"]" 
     />
</div>



@code {

    private List<WorkOrdersTableContext> workOrders = new();
    private List<LinesScheduleTableContext> linesSchedule = new();
    private List<LinesScheduleTableContext> filteredSchedule = new();
    private List<LinesScheduleTableContext> unfilteredSchedule = new();
    private Dictionary<string, bool> keyValuePairs = new();
    private TablesSwitcher tablesSwitcher = new();
    private LinesScheduleTable lineSchedulesTable = new();
    private WorkOrdersTable workOrdersTable = new();
    private string selectedLineName = string.Empty;
    private List<string?> linesName = new();


    protected override async Task OnInitializedAsync()
    {
        keyValuePairs.Add("Orders", true);
        keyValuePairs.Add("Lines", false);
        await AskForLineNames();       
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Async code to run after the first render
            await AskForGetExistedOrders();
            workOrdersTable.RefreshTable();

            await AskForLinesScedule();
            unfilteredSchedule = linesSchedule;
            // lineSchedulesTable.RefreshTable();
            StateHasChanged();
        }
    }

    private void FilterLinesTable(object e)
    {
        linesSchedule = unfilteredSchedule;
        var lineNum = (string)e;

        if (e == string.Empty)
            return;

        linesSchedule = linesSchedule.Where(e => e.RelatedToLine == lineNum).ToList();
        StateHasChanged();
    }

    private async Task AskForLinesScedule()
    {
        try
        {
            using var request = await Http.GetAsync("uploadinfo/getexistedlinesscedule");
            var json = request.Content.ReadFromJsonAsync<List<LinesScheduleTableContext>>();
            linesSchedule = json.Result;


        }catch(Exception ex)
        {
            //TODO

        }

    }

    private async Task AskForLineNames()
    {
        using var request = await Http.GetAsync("uploadinfo/getlinesname");
        var json = request.Content.ReadFromJsonAsync<List<string>>();
        linesName = json.Result;
    }

    private async Task AskForGetExistedOrders()
    {
        try
        {
            using var request = await Http.GetAsync("uploadinfo/getexistedworkorders");
            var response = await request.Content.ReadFromJsonAsync<List<WorkOrdersTableContext>>();
            workOrders = response;


        }
        catch (Exception ex)
        {
            //TODO  
        }

    }

    private async Task ImportXlsxFile(InputFileChangeEventArgs e)
    {
        try
        {
            using (var fileStream = e.File.OpenReadStream())
            using (var ms = new MemoryStream())
            {
                await fileStream.CopyToAsync(ms);
                ms.Position = 0;

                var xxwb = new XSSFWorkbook(ms);
                var sheet = xxwb.GetSheetAt(0);


                for (var i = sheet.FirstRowNum + 1; i <= sheet.LastRowNum; i++)
                {
                    var row = sheet.GetRow(i);
                    if (row == null) continue;

                    var workOrder = new WorkOrdersTableContext();


                    for (var j = row.FirstCellNum; j < row.LastCellNum; j++)
                    {
                        var cell = row.GetCell(j);
                        if (cell == null) continue;


                        switch (cell.CellType)
                        {
                            //if string
                            case CellType.String:
                                var cellValue = cell.ToString();

                                if (j == 0) workOrder.WorkOrderSN = cellValue;
                                else if (j == 1) workOrder.ProductDesc = cellValue;
                                else if (j == 3) workOrder.Comments = cellValue;
                              

                                break;
                            case CellType.Numeric:
                                if (DateUtil.IsCellDateFormatted(cell))
                                {
                                    workOrder.CompletionDate = (DateTime)cell.DateCellValue;
                                }
                                else
                                {
                                    // if numeric
                                    if (j == 2) workOrder.Quantity = (int)cell.NumericCellValue;
                                    else if (j == 4) workOrder.OptionalLine1 = cell.ToString();
                                    else if (j == 5) workOrder.OptionalLine2 = cell.ToString();
                                    else if (j == 6) workOrder.Priority = (int)cell.NumericCellValue;
                                    else if (j == 8) workOrder.SizeInMicron = (int)cell.NumericCellValue;
                                }
                                break;
                        }
                    }
                    if (workOrders.Contains(workOrder) || string.IsNullOrEmpty(workOrder.WorkOrderSN))
                    {
                        continue;
                    }
                    else
                        workOrders.Add(workOrder);



                }

                workOrdersTable.RefreshTable();
                await AskForUploadInfoRequset(workOrders);
                await AskForSettigDataToRelatedTables(workOrders);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("ImportXlsxFile:" + "" + ex.Message);

        }
        StateHasChanged();
    }

    private async Task AskForUploadInfoRequset(List<WorkOrdersTableContext> info)
    {
        using var request = await Http.PostAsJsonAsync("uploadinfo/postworkorderstable", info);
    }

    private async Task AskForSettigDataToRelatedTables(List<WorkOrdersTableContext> workOrders)
    {
        try
        {
            using var request = await Http.PostAsJsonAsync("uploadinfo/postdatatorelatedtables", workOrders);
            //TODO - write a toast message if process get wrong
        }
        catch (Exception ex)
        {
            Console.WriteLine("AskForSettigDataToRelatedTables:" + "" + ex.Message);
            
        }
    }

    private void SwitchToTable()
    {
        var outPut = tablesSwitcher.GetTableName();

        foreach (var visibility in keyValuePairs?.Keys)
        {
            keyValuePairs[visibility] = false;
        }
        MakeVisible(outPut);
        StateHasChanged();

    }

    private void MakeVisible(string target)
    {

        foreach (KeyValuePair<string, bool> kvp in keyValuePairs)
        {
            if (kvp.Key == target)
            {
                SetValueToTrue(target);
            }
        }
    }

    private void SetValueToFalse(string key) => keyValuePairs[key] = false;

    private void SetValueToTrue(string key) => keyValuePairs[key] = true;
}
  
