@page "/dashboard"
@using Radzen
@using Radzen.Blazor
@using SapirProductionFloorManagment.Client.Shared
@inject HttpClient Http

<h2>Production Dashboard</h2>


<style>
    .indicator-container {
        display: flex;
        flex-wrap: wrap; 
    }

        .indicator-container > div {
            flex-basis: calc(25% - 10px); 
            margin: 5px; 
        }

    .data-indicator {
        text-align: center;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f5f5f5;
        height: 150px; 
        width: 200px; 
        overflow: hidden; 
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

        .data-indicator img {
            width: 40px;
            height: 40px;
            margin-bottom: 10px;
        }

        .data-indicator span {
            font-size: 1.2rem; /
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
        }
</style>


 <h3>Key Performance Indicators</h3>
<div class="indicator-container">
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-industry"></i> 
            <span>Lines Status</span>
            <span style="color:green;">@onlineLines</span>
            <span style="color:red;">Offline: @offlineLines</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-chart-line"></i> 
            <span>Avg Production Rate</span>
            <span>@averageProductionPerHour.ToString("N0") per hour</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-bolt"></i> 
            <span>Global Utilization</span>
            <span>@globalUtilization.ToString("N0") %</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-trophy"></i>
            <span>Most Utilized Line</span>
            <span>@mostUtilizedLine</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-thermometer-empty"></i> 
            <span>Least Utilized Line</span>
            <span>@leastUtilizedLine</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-boxes"></i> 
            <span>Total Orders Processed</span>
            <span>@appointments.Count</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-exclamation-triangle"></i> 
            <span>Overdue Orders</span>
            <span>@overdueOrdersCount</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-weight"></i> 
            <span>Total Production (kg)</span>
            <span>@totalProductionKg.ToString("N0") kg</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-check-circle"></i> 
            <span>Completed Orders</span>
            <span>@completedOrdersCount</span>
        </div>
    </div>
    <div class="p-2">
        <div class="data-indicator">
            <i class="fas fa-clock"></i> 
            <span>Avg Work Duration</span>
            <span>@avgWorkDuration.ToString("N1") hours</span>
        </div>
    </div>
</div>


<h3>Line Utilization</h3>
@if (lineLoadData.Count == 0)
{
    <p>No records to display.</p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    AllowPaging="false" Data="@lineLoadData" TItem="LineLoadInfo" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="LineLoadInfo" Property="LineName" Title="Line" Width="160px" />
            <RadzenDataGridColumn TItem="LineLoadInfo" Property="TotalHoursWorked" Title="Hours Worked" Width="160px">
                <Template Context="data">
                    @Math.Round(data.TotalHoursWorked, 1) 
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LineLoadInfo" Property="UtilizationPercentage" Title="Utilization (%)" Width="160px">
                <Template Context="data">
                    <RadzenProgressBar Value="@(data.UtilizationPercentage)" Max="100" ShowValue="true"
                                       Style="@(GetProgressBarColor(data.UtilizationPercentage))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}



<h3>Order Priorities</h3>
<RadzenChart>
    <RadzenColumnSeries Data="@priorityData" CategoryProperty="Priority" ValueProperty="OrderCount" />
</RadzenChart>


<h3>Orders: Time Left to Finish</h3>
<RadzenDataGrid Data="@appointments" TItem="Appointment">
    <Columns>
        <RadzenDataGridColumn TItem="Appointment" Property="WorkOrderSN" Title="Work Order" />
        <RadzenDataGridColumn TItem="Appointment" Property="FormatedLeftToFinish" Title="Time Left to Finish" />
    </Columns>
</RadzenDataGrid>



@code {
    private const int WorkDayHours = 10; 
    private int onlineLines = 5; 
    private int offlineLines = 1; 
    private double averageProductionPerHour = 0; 
    private double globalUtilization = 0; 
    private string mostUtilizedLine; 
    private string leastUtilizedLine; 
    private int overdueOrdersCount = 0;
    private int completedOrdersCount = 0; 
    private double totalProductionKg = 0; 
    private double avgWorkDuration = 0; 

    public List<LineLoadInfo> lineLoadData = new();
    public List<Line> lines = new(); 
    public List<Appointment> appointments = new(); 
    public List<PriorityData> priorityData = new(); 

    public class LineLoadInfo
    {
        public string LineName { get; set; }
        public double TotalHoursWorked { get; set; }
        public double UtilizationPercentage { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadLines();
        await LoadAppointments();
        CalculateLineUtilizationData();
        CalculateAdditionalMetrics();
        StateHasChanged();
    }

    async Task LoadLines()
    {
        try
        {
            lines = await Http.GetFromJsonAsync<List<Line>>("/LineWorkPlan/GetLines");
            Console.WriteLine($"Loaded {lines.Count} lines.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lines: {ex.Message}");
        }
    }

    async Task LoadAppointments()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<LineWorkPlan>>("/LineWorkPlan/GetWorkSchedule");
            if (response != null)
            {
                appointments = response.Select(item => new Appointment
                    {
                        Start = item.StartWork ?? DateTime.Now,
                        End = item.EndWork ?? DateTime.Now,
                        RelatedToLine = item.RelatedToLine,
                        QuantityInKg = item.QuantityInKg,
                        Priority = item.Priority,
                        DeadLineDateTime = item.DeadLineDateTime ?? DateTime.Now,
                        FormatedLeftToFinish = item.FormatedLeftToFinish
                    }).ToList();
                Console.WriteLine($"Loaded {appointments.Count} appointments.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appointments: {ex.Message}");
        }
    }

    void CalculateLineUtilizationData()
    {
        lineLoadData.Clear();

        foreach (var line in lines)
        {
            var lineAppointments = appointments.Where(a => a.RelatedToLine == line.Name);
            var totalHoursWorked = lineAppointments.Sum(a => (a.End - a.Start).TotalHours);
            var utilization = Math.Round((totalHoursWorked / WorkDayHours) * 100);

            lineLoadData.Add(new LineLoadInfo
                {
                    LineName = line.Name,
                    TotalHoursWorked = totalHoursWorked,
                    UtilizationPercentage = Math.Min((int)Math.Round(utilization), 100) 
                });
        }

        globalUtilization = lineLoadData.Average(l => l.UtilizationPercentage);

      
        mostUtilizedLine = lineLoadData.OrderByDescending(l => l.UtilizationPercentage).FirstOrDefault()?.LineName;

      
        leastUtilizedLine = lineLoadData.OrderBy(l => l.UtilizationPercentage).FirstOrDefault()?.LineName;
    }

    void CalculateAdditionalMetrics()
    {
       
        overdueOrdersCount = appointments.Count(a => a.DeadLineDateTime < DateTime.Now && a.FormatedLeftToFinish != "0");

    
        completedOrdersCount = appointments.Count(a => a.End < DateTime.Now);


        totalProductionKg = appointments.Sum(a => a.QuantityInKg);

      
        avgWorkDuration = appointments.Average(a => (a.End - a.Start).TotalHours);

        priorityData = appointments
            .GroupBy(a => a.Priority)
            .Select(g => new PriorityData { Priority = g.Key, OrderCount = g.Count() })
            .ToList();
    }

    private string GetProgressBarColor(double percentage)
    {
        if (percentage < 30)
            return "background-color: red;";
        if (percentage < 70)
            return "background-color: yellow;";
        return "background-color: green;";
    }

    public class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string RelatedToLine { get; set; }
        public int QuantityInKg { get; set; }
        public int Priority { get; set; }
        public DateTime DeadLineDateTime { get; set; }
        public string FormatedLeftToFinish { get; set; }
    }
}
