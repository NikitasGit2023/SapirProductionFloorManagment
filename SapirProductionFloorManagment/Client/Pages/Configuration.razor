@page "/config"
@inject HttpClient Http
@using SapirProductionFloorManagment.Client.Shared
@using SapirProductionFloorManagment.Client.Shared.Tables

<h3>Configuration</h3>

<div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
        <img src="..." class="rounded me-2" alt="...">
        <strong class="me-auto">Bootstrap</strong>
        <small>11 mins ago</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
        Hello, world! This is a toast message.
    </div>
</div>

<TablesSwitcher @ref="tablesSwitcher" OnClick="()=>SwitchToTable()" Switchers="keyValuePairs"/>

<br/>


<LinesWorkHoursTable IsCrudFrozen="false" IsVisible="@keyValuePairs["Lines Work Days"]" />

<LinesTable IsCrudFrozen="false" Data="linesData" IsVisible="@keyValuePairs["Lines General Information"]" />

<UsersTable IsCrudFrozen="false" IsVisible="@keyValuePairs["Users Information"]"/>

    
@code {

    private Dictionary<string, bool> keyValuePairs = new();
    private TablesSwitcher tablesSwitcher = new();
    private List<Line> linesData = new();
    private List<LineWorkHours> workHoursData = new();


    private void SetValueToFalse(string key) => keyValuePairs[key] = false;
    private void SetValueToTrue(string key) => keyValuePairs[key] = true;


    protected override async Task OnInitializedAsync()
    {
        // keyValuePairs.Add("Products", false);
        keyValuePairs.Add("Users Information", false);
        keyValuePairs.Add("Lines General Information", true);
        keyValuePairs.Add("Lines Work Days", false);

        linesData = await AskForLinesData();

        StateHasChanged();
    }



    public async Task<List<Line>> AskForLinesData()
    {
        try
        {
            using var data = await Http.GetAsync("configuration/getlinesdata");
            var content = data.Content.ReadFromJsonAsync<List<Line>>();
            if (content.Result != null)
                return content.Result;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        return null;
    }


    private void SwitchToTable()
    {
        var outPut =  tablesSwitcher.GetTableName();

        foreach (var visibility in keyValuePairs?.Keys)
        {
            keyValuePairs[visibility] = false;

        }
        MakeVisible(outPut);
        StateHasChanged();

    }


    private void MakeVisible(string target)
    {

        foreach (KeyValuePair<string, bool> kvp in keyValuePairs)
        {
            if (kvp.Key == target)
            {
                SetValueToTrue(target);

            }
        }
    }




}



