@using SapirProductionFloorManagment.Client.Shared.Tables
@using SapirProductionFloorManagment.Client.Shared
@inject IToastService toastService
@inject HttpClient Http

@page "/generaltables"

<TablesSwitcher 
    @ref="tablesSwitcher" 
    Switchers="keyValuePairs"
    OnClick="SwitchToTable"/>

<WorkOrdersTable IsVisible="@keyValuePairs["Orders"]" IsCrudFrozen="true" ShowProgressBar="true" FullMode="false" />

<ProductsTable IsVisible="@keyValuePairs["Products"]" IsCrudFrozen="true" />
               
<CustomersTable IsVisible="@keyValuePairs["Customers"]" />

<LinesTable Data="linesData"  IsVisible="@keyValuePairs["Lines"]" IsCrudFrozen="true"/>

    

@code {

    private Dictionary<string, bool> keyValuePairs = new();
    private TablesSwitcher tablesSwitcher = new();
    private List<Line> linesData = new List<Line>();


    protected override async Task OnInitializedAsync()
    {
        keyValuePairs.Add("Orders", true);
        keyValuePairs.Add("Products", false);
        keyValuePairs.Add("Customers", false);
        keyValuePairs.Add("Lines", false);

        linesData = await AskForLinesData();
        StateHasChanged();
    }




    private void SwitchToTable()
    {
        var outPut = tablesSwitcher.GetTableName();

        foreach (var visibility in keyValuePairs?.Keys)
        {
            keyValuePairs[visibility] = false;

        }
        MakeVisible(outPut);
        StateHasChanged();

    }


    // asking for lines data
    public async Task<List<Line>> AskForLinesData()
    {
        try
        {
            using var data = await Http.GetAsync("configuration/getlinesdata");
            var content = data.Content.ReadFromJsonAsync<List<Line>>();
            if (content.Result != null)
                return content.Result;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        return null;
    }



    private void MakeVisible(string target)
    {

        foreach (KeyValuePair<string, bool> kvp in keyValuePairs)
        {
            if (kvp.Key == target)
            {
                SetValueToTrue(target);

            }
        }
    }


    private void SetValueToFalse(string key) => keyValuePairs[key] = false;
    private void SetValueToTrue(string key) => keyValuePairs[key] = true;


}
