@inherits TableBase
@inject HttpClient Http
@inject IToastService toastService
@using SapirProductionFloorManagment.Client.Shared
@using SapirProductionFloorManagment.Client.Shared.Buttons

<PageTitle>Users</PageTitle>


<div class="d-flex flex-row-reverse">
    <div class="p-2">
        <RadzenStack Visible="(IsCrudFrozen==false && IsVisible==true)" Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Gap="10px" class="mt-2 mb-4">
                <AddRowButton Text="Add User" OnClick="InsertRow" Disabled="false" />
        </RadzenStack>
    </div>
</div>



<RadzenDataGrid Visible="IsVisible" @ref="usersGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                AllowSorting="true" Data="@usersData" TItem="User" ColumnWidth="200px"
                SelectionMode="DataGridSelectionMode.Single">
    <Columns>
    
        <RadzenDataGridColumn TItem="User" Property="FullName" Title="Full Name">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.FullName" Style="width:200px; display: block" Name="Full Name" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Password" Title="Password" Sortable="false" Filterable="false">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Password" Style="width:200px; display: block" Name="Password" />
            </EditTemplate>
            </RadzenDataGridColumn>


        <RadzenDataGridColumn  TItem="User" Property="Role" Title="Role" >
            <EditTemplate Context="user">
                <RadzenDropDown TValue="string" Data="@permissions" Change="@(args => user.Role = args.ToString())" />
            </EditTemplate>
        </RadzenDataGridColumn>


        @*from here crud buttons*@
        <RadzenDataGridColumn TItem="User" Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="user">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="user">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(user))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(user))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>

@code 
{

    private List<string> permissions = new List<string> {"Developer","Admin", "Basic"};
    private DataGridEditMode editMode = DataGridEditMode.Single;
    private List<User> usersToInsert = new List<User>();
    private List<User> usersToUpdate = new List<User>();
    private IList<User>? usersData;
    private bool IsAddButtonDisabled = true;

    public RadzenDataGrid<User>? usersGrid = new();



    protected override async Task OnInitializedAsync()
    {
        usersData = await GetUsersData();
        await base.OnInitializedAsync();
    }


    //get users data from db
    private async Task<List<User>> GetUsersData()
    {
        try
        {
            using var data = await Http.GetAsync("configuration/getusersdata");
            var content = data.Content.ReadFromJsonAsync<List<User>>();
            if (content.Result != null)
                return content.Result;

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        return null;
    }

    //add user to db
    protected async Task AddUser(User user)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("configuration/postnewuser", user);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess(message.Result);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);

        }

    }


    //update user inisde db
    protected async Task UpdateUser(User user)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("configuration/updateuser", user);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess(message.Result);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);

        }
    }


    //remove user inside db
    private async Task RemoveUser(User user)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("configuration/removeuser", user);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess(message.Result);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private void Reset()
    {
        usersToInsert.Clear();
        usersToUpdate.Clear();
    }

    private void Reset(User user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }

    private async Task EditRow(User user)
    {
        if (editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)
        {
            Reset();
        }

        usersToUpdate.Add(user);
        await usersGrid.EditRow(user);
    }

    private void OnUpdateRow(User user)
    {
        Reset(user);
        //update
    }

    //the green button
    private async Task SaveRow(User user)
    {
        // if (usersData.Contains(user))
        // {

        if (user.UserId is 0)
        {
            await usersGrid.UpdateRow(user);
            await AddUser(user);
            return;
        }

        await usersGrid.UpdateRow(user);
        await UpdateUser(user);

        // }

    }


    //cancel edit
    private void CancelEdit(User user)
    {
        Reset(user);
        usersGrid.CancelEditRow(user);
    }


    //delete row 
    private async Task DeleteRow(User user)
    {
        Reset(user);

        if (usersData.Contains(user))
        {

            usersData.Remove(user);
            CancelEdit(user);

            if (user.UserId != 0)
                await RemoveUser(user);
        }
        else 
        {
            usersGrid.CancelEditRow(user);
            await usersGrid.Reload();
        }

        await usersGrid.Reload();
    }

    //add user 
    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var user = new User();
        usersToInsert.Add(user);
        await usersGrid.InsertRow(user);


    }

    private void OnCreateRow(User user)
    {

        usersToInsert.Remove(user);
    }


    private void ChangeUserRole(ChangeEventArgs e)
    {

        
    }


}
