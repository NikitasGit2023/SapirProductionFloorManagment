@inherits TableBase
@using SapirProductionFloorManagment.Client.Shared

<PageTitle>Users</PageTitle>

<RadzenStack Visible="IsVisible" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add User" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)" />
</RadzenStack>


<RadzenDataGrid Visible="IsVisible" @ref="usersGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                AllowSorting="true" Data="@users" TItem="User" ColumnWidth="200px"
                SelectionMode="DataGridSelectionMode.Single">
    <Columns>
    
        <RadzenDataGridColumn TItem="User" Property="FullName" Title="Full Name">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.FullName" Style="width:200px; display: block" Name="Full Name" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Password" Title="Password" Sortable="false" Filterable="false">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Password" Style="width:200px; display: block" Name="Password" />
            </EditTemplate>
            </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="JobTitle" Title="Job Title" >
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.JobTitle" Style="width:200px; display: block" Name="Job Title" />
            </EditTemplate>     
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="User" Property="Permission" Title="Permission" >
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Permission" Style="width:200px; display: block" Name="Permission" />
            </EditTemplate>
        </RadzenDataGridColumn>
   


        @*from here crud buttons*@
        <RadzenDataGridColumn TItem="User" Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="user">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="user">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(user))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(user))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>

@code {

    DataGridEditMode editMode = DataGridEditMode.Single;
    RadzenDataGrid<User>? usersGrid;
    List<User> usersToInsert = new List<User>();
    List<User> usersToUpdate = new List<User>();

    List<User> fetchedUsers = new();
    IEnumerable<User>? users;
    protected User user = new();


    protected override async Task OnInitializedAsync()
    {
        fetchedUsers.Add(new User
            {
              FullName= "Nikita Gelfman",
              JobTitle ="World Mannager",
              Permission ="The Best One",
              Password = "3194Rijick",
              WorkerId = 5677395,
            });

        users = fetchedUsers;

        await base.OnInitializedAsync();
    }

    private void Reset()
    {
        usersToInsert.Clear();
        usersToUpdate.Clear();
    }

    private void Reset(User user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }



    private async Task EditRow(User user)
    {
        if (editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)
        {
            Reset();
        }

        usersToUpdate.Add(user);
        await usersGrid.EditRow(user);
    }

    void OnUpdateRow(User user)
    {
        Reset(user);

        //dbCon upate

        //dbCon save
    }



    async Task SaveRow(User user)
    {
        await usersGrid.UpdateRow(user);
    }

    void CancelEdit(User user)
    {
        Reset(user);

        usersGrid.CancelEditRow(user);

        //TODO
        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }

    private async Task DeleteRow(User user)
    {
        Reset(user);

        if (users.Contains(user))
        {
            // dbCon remove

            //dbCon save

            await usersGrid.Reload();
        }
        else
        {
            usersGrid.CancelEditRow(user);
            await usersGrid.Reload();
        }
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var user = new User();
        usersToInsert.Add(user);
        await usersGrid.InsertRow(user);
    }


    private void OnCreateRow(User user)
    {
        //dbCon Add
        //dbCon save
        usersToInsert.Remove(user);
    }


    //to do a vocabulary to hours


}
