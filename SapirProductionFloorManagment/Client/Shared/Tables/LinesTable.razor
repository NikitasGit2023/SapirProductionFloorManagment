@inherits TableBase
@using SapirProductionFloorManagment.Client.Shared.Buttons
@using SapirProductionFloorManagment.Client.Shared


<PageTitle>Lines</PageTitle>
@*
<div class="d-flex mb-3">
    <div class="me-auto p-2">Flex item</div>
    <div class="p-2">Flex item</div>
    <div class="p-2">Flex item</div>
</div>*@

<div class="d-flex flex-column mb-3">
    <div class="p-2">
        <RadzenHtml Visible="IsVisible">
            <div class="d-flex flex-row-reverse">
                <div class="p-2">
               
                @if (IsCrudFrozen == false)
                {
                    <div class="d-flex flex-row-reverse">
                    <div class="p-2">
                        <AddRowButton OnClick="InsertRow" Text="Add Line" Disabled="@(editMode == DataGridEditMode.Single && linesToInsert.Count() > 0)" />
                    </div>
                    </div>
                }
                </div>
            </div>
        </RadzenHtml>


    </div>
    <div class="p-2">
        <RadzenDataGrid Visible="IsVisible" @ref="linesGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4" 
                        AllowSorting="true" Data="@gridData" TItem="Line" @bind-Value="selectedLine" SelectionMode="DataGridSelectionMode.Single">
                        
            <Columns>
                <RadzenDataGridColumn TItem="Line" Property="LineNumber" Title="No" Width="100px" />

                <RadzenDataGridColumn TItem="Line" Width="150px" Property="Name" Title="Line Name" Frozen="IsCrudFrozen">
                    <EditTemplate Context="line" >
                        <RadzenTextBox @bind-Value="line.Name" Style="width:200px; display: block" Name="LineName" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Visible="(IsDemoShowed is false)" TItem="Line" Property="ProductionRate" 
                                      Title="Rate" Frozen="IsCrudFrozen" Width="150px">
                    <EditTemplate Context="line">
                        <RadzenNumeric @bind-Value="line.ProductionRate" Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn Visible="(IsDemoShowed is false)" TItem="Line" Property="ShiftStartWork" Title="Start Work" Frozen="IsCrudFrozen" Width="200px">
                    <EditTemplate Context="line" >
                        <RadzenDropDown TValue="string" Data="@hourOptions" @bind-Value="line.ShiftStartWork"
                                        Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn Visible="(IsDemoShowed is false)" TItem="Line" Property="ShiftEndWork" Title="End Work" Frozen="IsCrudFrozen" Width="150px">
                    <EditTemplate Context="line">
                        <RadzenDropDown TValue="string" Data="@hourOptions" @bind-Value="line.ShiftEndWork"
                                        Style="width:100%; display: block" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Visible="(IsDemoShowed is false)" TItem="Line" Property="WorkDays" Title="Work Days" Frozen="IsCrudFrozen" >
                    <Template Context="line">
                        <div class="d-flex flex-row mb-3">
                            <WorkingDaysCheck Line="line">
                            </WorkingDaysCheck>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                @if (!IsCrudFrozen)
                {
                    @*from here crud buttons*@
                    <RadzenDataGridColumn Width="150px" Visible="(IsDemoShowed is false)" TItem="Line" Context="line" Filterable="false" Sortable="false"
                                      TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="line">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(line))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(line))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="line">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(line))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(line))">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(line))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                }

            </Columns>
        </RadzenDataGrid>



    </div>

</div>


@code {

    [Parameter]
    public bool IsDemoShowed { get; set; }

    DataGridEditMode editMode = DataGridEditMode.Single;
    RadzenDataGrid<Line>? linesGrid = new();
    List<Line> linesToInsert = new List<Line>();
    List<Line> linesToUpdate = new List<Line>();

    List<Line> fetchedLines = new();
    IList<Line>? selectedLine;
    IList<Line>? gridData;
    protected Line line = new();
    List<string>? hourOptions;


    protected override async Task OnInitializedAsync()
    {
        fetchedLines.Add(new Line
            {
                LineNumber = 1,
                Name = "The Best Line",
                ProductionRate = 1000000,
                WorkOrder = { Id = 5677395},
            });

        //get data from DB
        gridData = fetchedLines;

        //set workhours to each row
        hourOptions = Enumerable.Range(0, 24)
                               .Select(hour => new TimeOnly(hour, 0).ToString())
                               .ToList();

        //assign the first row of the to selectedLines
        selectedLine = gridData.ToList();
        await base.OnInitializedAsync();
    }

    private void Reset()
    {
        linesToInsert.Clear();
        linesToUpdate.Clear();
    }

    private void Reset(Line line)
    {
        linesToInsert.Remove(line);
        linesToUpdate.Remove(line);
    }



    private async Task EditRow(Line line)
    {
        if (editMode == DataGridEditMode.Single && linesToInsert.Count() > 0)
        {
            Reset();
        }

        linesToUpdate.Add(line);
        await linesGrid.EditRow(line);
    }

    void OnUpdateRow(Line line)
    {
        Reset(line);

        //dbCon upate

        //dbCon save
    }



    async Task SaveRow(Line line)
    {
        await linesGrid.UpdateRow(line);
    }

    void CancelEdit(Line line)
    {
        Reset(line);

        linesGrid.CancelEditRow(line);

        //TODO
        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }

    private async Task DeleteRow(Line line)
    {
        Reset(line);

        if (gridData.Contains(line))
        {
            // dbCon remove

            //dbCon save

            await linesGrid.Reload();
        }
        else
        {
            linesGrid.CancelEditRow(line);
            await linesGrid.Reload();
        }
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var line = new Line();
        linesToInsert.Add(line);
        await linesGrid.InsertRow(line);
    }


    private void OnCreateRow(Line line)
    {
        //dbCon Add
        //dbCon save
        linesToInsert.Remove(line);
    }

    public List<Line> GetSelectedData()
    {
        return selectedLine.ToList();

    }

     //to do a vocabulary to hours

 
}