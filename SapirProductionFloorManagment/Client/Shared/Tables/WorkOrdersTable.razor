@inherits TableBase
@inject HttpClient Http
@using SapirProductionFloorManagment.Client.Shared
@using SapirProductionFloorManagment.Client.Shared.Buttons


<div class="d-flex mb-3">
    <div class="me-auto p-2">
        <RadzenHtml Visible="IsVisible">
            <div class="d-flex flex-row-reverse">
                @if (IsCrudFrozen == false)

                {
                    <div class="p-2">
                        <div class="d-flex flex-row-reverse">
                            <div class="p-2">
                                <AddRowButton Text="Add Order" OnClick="InsertRow"  />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </RadzenHtml>
    </div>
</div>


<RadzenDataGrid Visible="IsVisible" @ref="ordersGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
                AllowSorting="true" Data="@orders" TItem="WorkOrder" ColumnWidth="200px"
                SelectionMode="DataGridSelectionMode.Single" >
    <Columns>
         <RadzenDataGridColumn TItem="WorkOrder" Property="WorkOrderSN" Title="WO" Frozen="true" Width="100px" TextAlign="TextAlign.Center">
            <EditTemplate Context="order">
                <RadzenTextBox @bind-Value="order.WorkOrderSN" Style="width:100%; display: block;" />
             </EditTemplate>
         </RadzenDataGridColumn>
      
         <RadzenDataGridColumn TItem="WorkOrder" Property="ProductDesc" Title="PN" Frozen="true" 
             Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
             <EditTemplate Context="order">
                <RadzenTextBox @bind-Value="order.ProductDesc" Style="width:100%; display: block;" />
            </EditTemplate>       
        </RadzenDataGridColumn>


        <RadzenDataGridColumn TItem="WorkOrder" Property="QuantityInKg" Title="Qt" Frozen="IsCrudFrozen" Width="80px">
            <EditTemplate Context="order">
                <RadzenNumeric @bind-Value="order.QuantityInKg" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="order" TItem="WorkOrder" Property="QuantityLeft" Title="Quntity Left" Width="120px">
            <EditTemplate>
                <RadzenNumeric @bind-Value="order.QuantityLeft" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>
    
       
        <RadzenDataGridColumn Visible="@FullMode" Context="order" TItem="WorkOrder" Property="OptionalLine1" Frozen="IsCrudFrozen" Title="Line Op 1" Width="120px">
            <EditTemplate>
                <RadzenTextBox @bind-Value="order.OptionalLine1" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Visible="@FullMode" Context="order" TItem="WorkOrder" Property="OptionalLine2" Frozen="IsCrudFrozen" Title="Line Op 2" Width="120px">
            <EditTemplate>
                <RadzenTextBox @bind-Value="order.OptionalLine2" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="order" TItem="WorkOrder" Property="Priority" Title="Priority" Width="120px">
            <EditTemplate>
                <RadzenNumeric @bind-Value="order.Priority" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="order" TItem="WorkOrder" Property="DeadLineDateTime" Frozen="IsCrudFrozen" Title="Completion Date" Width="150px">
           <EditTemplate>
                <RadzenDatePicker @bind-Value="order.DeadLineDateTime"/>
           </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Visible="@FullMode" Context="order" TItem="WorkOrder" Property="SizeInMicron" Title="Size(Micron)" Width="120px">
            <EditTemplate>
                <RadzenNumeric @bind-Value="order.SizeInMicron" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="order" TItem="WorkOrder" Property="Status" Title="Status" Width="120px">
            <EditTemplate>
                <RadzenText @bind-Value="order.Status" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>



        @*crud buttons*@
        @if(IsCrudFrozen is false)
        {
            <RadzenDataGridColumn Width="100px" TItem="WorkOrder" Context="order" Filterable="false" Sortable="false"
                              TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                              Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                              Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                              Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        }    
    </Columns>
</RadzenDataGrid>


@code 
{


    [Parameter]
    public List<WorkOrder>? Data { get; set; }

    [Parameter]
    public bool FullMode { get; set; } = true;

    private DataGridEditMode editMode = DataGridEditMode.Single;
    private RadzenDataGrid<WorkOrder>? ordersGrid;
    private List<WorkOrder> ordersToInsert = new List<WorkOrder>();
    private List<WorkOrder> ordersToUpdate = new List<WorkOrder>();
    private List<WorkOrder>? orders;
    private WorkOrder order = new();

    protected override async Task OnInitializedAsync()
    {
        await AskForGetExistedOrders();
        orders = Data.OrderBy( e => e.DeadLineDateTime).ToList();

        await base.OnInitializedAsync();
    }

    public void RefreshTable()
    {
        try
        {
            orders = new();
            orders = Data;
            ordersGrid?.Reload();


        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task AskForGetExistedOrders()
    {
        try
        {
            using var request = await Http.GetAsync("uploadinfo/getexistedworkorders");
            var response = await request.Content.ReadFromJsonAsync<List<WorkOrder>>();
            Data = response;


        }
        catch (Exception ex)
        {
            //TODO
        }

    }

    private async Task AskForAddOrder(WorkOrder order)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("uploadinfo/addorder", order);
            var message = data.Content.ReadFromJsonAsync<string>();
            // toastService.ShowSuccess("The data is added succesfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);

        }

    }

    private async Task AskForUpdateOrder(WorkOrder order)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("uploadinfo/updateorder", order);
            var message = data.Content.ReadFromJsonAsync<string>();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);

        }
    }

    private async Task AskForRemoveOrder(WorkOrder order)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("uploadinfo/removeorder", order);
            var message = data.Content.ReadFromJsonAsync<string>();
            Console.WriteLine(message);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    private void Reset(WorkOrder order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }

    private async Task EditRow(WorkOrder order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    private void OnUpdateRow(WorkOrder order)
    {
        Reset(order);
        //update
    }

    //green button
    async Task SaveRow(WorkOrder order)
    {

        if (order.Id is 0)
        {
            await ordersGrid.UpdateRow(order);
            await AskForAddOrder(order);
            return;
        }

        await ordersGrid.UpdateRow(order);
        await AskForUpdateOrder(order);
    }

    private void CancelEdit(WorkOrder order)
    {
        Reset(order);
        ordersGrid.CancelEditRow(order);
    }

    //check
    private async Task DeleteRow(WorkOrder order)
    {
        //cleaning linesToInsert and LinesToUpdate
        Reset(order);

        if (orders.Contains(order))
        {
            orders.Remove(order);

            if (order.Id != 0)
                await AskForRemoveOrder(order);
        }
        await ordersGrid.Reload();
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var selected = new WorkOrder();
        order = selected;
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }

    private void OnCreateRow(WorkOrder order)
    {

        ordersToInsert.Remove(order);
    }


 


}
