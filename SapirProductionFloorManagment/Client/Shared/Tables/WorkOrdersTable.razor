@inherits TableBase
@using SapirProductionFloorManagment.Client.Shared
@using SapirProductionFloorManagment.Client.Shared.Buttons



<div class="d-flex mb-3">
    <div class="me-auto p-2">
        <RadzenHtml Visible="IsVisible">
            <div class="d-flex flex-row-reverse">
                @if (IsCrudFrozen == false)

                {
                    <div class="p-2">
                        <div class="d-flex flex-row-reverse">
                            <div class="p-2">
                                <AddRowButton Text="Add Order" OnClick="InsertRow" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </RadzenHtml>
    </div>
</div>


<RadzenDataGrid Visible="IsVisible" @ref="ordersGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="30"
                AllowSorting="true" Data="@orders" TItem="WorkOrdersTableContext" ColumnWidth="200px"
                SelectionMode="DataGridSelectionMode.Single" >
    <Columns>
         <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="WorkOrderSN" Title="WO" Frozen="true" Width="100px" TextAlign="TextAlign.Center">
             <EditTemplate Context="order">
                <RadzenText @bind-Value="order.WorkOrderSN" Style="width:100%; display: block;" />
             </EditTemplate>
         </RadzenDataGridColumn>
      
         <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="ProductDesc" Title="PN" Frozen="true" 
             Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
             <EditTemplate Context="order">
                <RadzenText @bind-Value="order.ProductDesc" Style="width:100%; display: block;" />
            </EditTemplate>       
        </RadzenDataGridColumn>


        <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="Quantity" Title="Qt" Frozen="IsCrudFrozen" Width="80px">
            <EditTemplate Context="order">
                 <RadzenNumeric @bind-Value="order.Quantity" Style="width:100%; display: block;"/>
            </EditTemplate>
        </RadzenDataGridColumn>

    
       
        <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="OptionalLine1" Frozen="IsCrudFrozen" Title="Line Op 1" Width="120px">
            <EditTemplate>
                <RadzenNumeric @bind-Value="order.OptionalLine1" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="OptionalLine2" Frozen="IsCrudFrozen" Title="Line Op 1" Width="120px">
            <EditTemplate>
                <RadzenNumeric @bind-Value="order.OptionalLine2" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="Priority" Title="Priority" Width="120px">
            <EditTemplate>
                <RadzenNumeric @bind-Value="order.Priority" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="CompletionDate" Frozen="IsCrudFrozen" Title="Completion Date" Width="150px">
           <EditTemplate>
                <RadzenDatePicker @bind-Value="order.CompletionDate"/>
           </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="WorkOrdersTableContext" Property="Priority" Title="SizeInMicron" Width="120px">
            <EditTemplate>
                <RadzenNumeric @bind-Value="order.SizeInMicron" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        @*crud buttons*@
        @if(IsCrudFrozen is false)
        {
            <RadzenDataGridColumn Width="100px" TItem="WorkOrdersTableContext" Context="order" Filterable="false" Sortable="false"
                              TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                              Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                              Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="line">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                              Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        }
         
    </Columns>
</RadzenDataGrid>



@code 
{
    [Parameter]
    public List<WorkOrdersTableContext>? Data { get; set; }

    private DataGridEditMode editMode = DataGridEditMode.Single;
    private RadzenDataGrid<WorkOrdersTableContext>? ordersGrid;
    private List<WorkOrdersTableContext> ordersToInsert = new List<WorkOrdersTableContext>();
    private List<WorkOrdersTableContext> ordersToUpdate = new List<WorkOrdersTableContext>();
    private List<WorkOrdersTableContext>? orders;

    protected List<WorkOrdersTableContext> fetchedOrders = new();
    protected WorkOrdersTableContext order = new();


    protected override async Task OnInitializedAsync()
    { 
        orders = Data;

        await base.OnInitializedAsync();
    }

    public void RefreshTable()
    {
        ordersGrid?.Reload();
    }

    private void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    private void Reset(WorkOrdersTableContext order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }



    private async Task EditRow(WorkOrdersTableContext order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    private void OnUpdateRow(WorkOrdersTableContext order)
    {
        Reset(order);
    }



    private async Task SaveRow(WorkOrdersTableContext order)
    {
        await ordersGrid.UpdateRow(order);
    }

    private void CancelEdit(WorkOrdersTableContext order)
    {
        Reset(order);

        ordersGrid.CancelEditRow(order);

    }

    private async Task DeleteRow(WorkOrdersTableContext order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new WorkOrdersTableContext();
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }


    private void OnCreateRow(WorkOrdersTableContext order)
    {
        ordersToInsert.Remove(order);
    }


}
