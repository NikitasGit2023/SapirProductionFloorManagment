@inherits TableBase
@inject HttpClient Http
@inject IToastService toastService 

<BlazoredToasts></BlazoredToasts>

<div class="d-flex flex-column mb-3">
    <div class="p-2">
        <RadzenHtml Visible="IsVisible">
            <div class="d-flex flex-row-reverse">
                <div class="p-2">
                    @if (IsCrudFrozen == false)
                    {
                        @if (IsNewRowCanAdded)
                        {
                            <div class="d-flex flex-row-reverse">
                                <div class="p-2">
                                    <AddRowButton OnClick="InsertRow" Text="Add Line" Disabled="false" />
                                </div>
                            </div>
                        }
                            
                        }
                     
                </div>
            </div>
        </RadzenHtml>
    </div>
    <div class="p-2">
        <RadzenDataGrid Visible="IsVisible" @ref="scheduleGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="20" 
                        AllowSorting="true" Data="@Data" TItem="LineWorkPlan" SelectionMode="DataGridSelectionMode.Single">
                        
            <Columns>
                <RadzenDataGridColumn Visible="false" TItem="LineWorkPlan" Property="Id" Title="Id" Width="100px" />

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="StartWork" Title="Start Work" Frozen="IsCrudFrozen">
                    <EditTemplate Context="schedule">
                        <RadzenDatePicker  @bind-Value="schedule.StartWork" Style="width:200px; display: block" Name="StartWork"  />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="EndWork" Title="End Work" Frozen="IsCrudFrozen">
                    <EditTemplate Context="schedule">
                        <RadzenDatePicker @bind-Value="schedule.EndWork" Style="width:200px; display: block" Name="EndWork"  />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="FormatedWorkDuration" Title="Work Duration" Frozen="IsCrudFrozen">
                    <EditTemplate Context="schedule" >
                        <RadzenTextBox  @bind-Value="schedule.FormatedWorkDuration" Style="width:200px; display: block" Name="FormatedWorkDuration"  />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="QuantityInKg" Title="Quantity (Kg)" Frozen="IsCrudFrozen">
                    <EditTemplate Context="schedule">
                        <RadzenNumeric @bind-Value="schedule.QuantityInKg" Style="width:100%; display: block;" Name="QuantityInKg" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="Description" Title="Description" Frozen="IsCrudFrozen">
                    <EditTemplate Context="schedule">
                        <RadzenTextBox @bind-Value="schedule.Description" Style="width:200px; display: block" Name="Description" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="WorkOrderSN" Title="Work Order SN" Frozen="IsCrudFrozen">
                    <EditTemplate Context="schedule">
                        <RadzenTextBox @bind-Value="schedule.WorkOrderSN" Style="width:200px; display: block" Name="WorkOrderSN" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="Comments" Title="Comments" Frozen="IsCrudFrozen">
                    <EditTemplate Context="schedule">
                        <RadzenTextBox @bind-Value="schedule.Comments" Style="width:200px; display: block" Name="Comments" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                @if (!IsCrudFrozen)
                {
                    <RadzenDataGridColumn Width="150px" TItem="LineWorkPlan" Context="schedule" Filterable="false" Sortable="false"
                                          TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="schedule">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(schedule))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(schedule))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="schedule">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(schedule))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(schedule))">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(schedule))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                }
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {


    [Parameter]
    public List<LineWorkPlan>? Data { get; set; } = new();

    private DataGridEditMode editMode = DataGridEditMode.Single;
    private RadzenDataGrid<LineWorkPlan>? scheduleGrid = new();
    private List<LineWorkPlan> schedulesToInsert = new List<LineWorkPlan>();
    private List<LineWorkPlan> schedulesToUpdate = new List<LineWorkPlan>();
    private List<LineWorkPlan>? fetchedSchedules;
    private LineWorkPlan selectedOne = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    private async Task AddSchedule(LineWorkPlan schedule)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("configuration/postnewschedule", schedule);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess("The data is added successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private async Task UpdateSchedule(LineWorkPlan schedule)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("configuration/updateschedule", schedule);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess("The data is updated successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private async Task RemoveSchedule(LineWorkPlan schedule)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("configuration/removeschedule", schedule);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess(message.Result);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private void Reset()
    {
        schedulesToInsert.Clear();
        schedulesToUpdate.Clear();
    }

    private void Reset(LineWorkPlan schedule)
    {
        schedulesToInsert.Remove(schedule);
        schedulesToUpdate.Remove(schedule);
    }

    private async Task EditRow(LineWorkPlan schedule)
    {
        if (editMode == DataGridEditMode.Single && schedulesToInsert.Count() > 0)
        {
            Reset();
        }

        schedulesToUpdate.Add(schedule);
        await scheduleGrid.EditRow(schedule);
    }

    private void OnUpdateRow(LineWorkPlan schedule)
    {
        Reset(schedule);
    }

    private async Task SaveRow(LineWorkPlan schedule)
    {
        if (schedule.Id == 0)
        {
            await scheduleGrid.UpdateRow(schedule);
            await AddSchedule(schedule);
            return;
        }

        await scheduleGrid.UpdateRow(schedule);
        await UpdateSchedule(schedule);
    }

    private void CancelEdit(LineWorkPlan schedule)
    {
        Reset(schedule);
        scheduleGrid.CancelEditRow(schedule);
    }

    private async Task DeleteRow(LineWorkPlan schedule)
    {
        Reset(schedule);

        if (Data.Contains(schedule))
        {
            Data.Remove(schedule);

            if(schedule.Id != 0)
                await RemoveSchedule(schedule);
        }
        await scheduleGrid.Reload();
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var schedule = new LineWorkPlan();
        selectedOne = schedule;
        // schedulesToInsert.Add(selectedOne);
        //await scheduleGrid.InsertRow(selectedOne);
        // await scheduleGrid.Reload();
    }

    private void OnCreateRow(LineWorkPlan schedule)
    {
        schedulesToInsert.Remove(schedule);
    }

    // public void RefreshTable()
    // {
    //     scheduleGrid?.Reload();
    // }

    public string ConvertDoubleToTimeFormat(double time)
    {
       
        int hours = (int)time;

        double fractionalPart = time - hours;

        int minutes = (int)(fractionalPart * 60);

        string formattedHours = $"({hours:D2})";

        string formattedMinutes = $"{minutes:D2}:00";

        return $"{formattedHours}+ {formattedMinutes}";
    }

}
