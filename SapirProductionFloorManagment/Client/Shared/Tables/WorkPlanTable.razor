@inherits TableBase
@inject HttpClient Http
@inject IToastService toastService 

<BlazoredToasts></BlazoredToasts>

<div class="d-flex flex-column mb-3">
    <div class="p-2">
        <RadzenHtml Visible="IsVisible">
            <div class="d-flex flex-row-reverse">
                <div class="p-2">
                    @if (IsCrudFrozen == false)
                    {
                        @if (IsNewRowCanAdded)
                        {
                            <div class="d-flex flex-row-reverse">
                                <div class="p-2">
                                    <AddRowButton OnClick="InsertRow" Text="Add Line" Disabled="false" />
                                </div>
                            </div>
                        }       
                    }
                </div>
            </div>
        </RadzenHtml>
    </div>
    <div class="p-2">
        <RadzenDataGrid Visible="IsVisible" @ref="workPlansGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="20" 
                        AllowSorting="true" Data="@Data" TItem="LineWorkPlan" SelectionMode="DataGridSelectionMode.Single">
                        
            <Columns>
                <RadzenDataGridColumn Visible="false" TItem="LineWorkPlan" Property="Id" Title="Id" Width="100px" />

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="100px" Property="RelatedToLine" Title="Line" Frozen="true">
                    <EditTemplate Context="workPlan">
                        <RadzenTextBox  @bind-Value="workPlan.RelatedToLine" Style="width:200px; display: block" Name="StartWork" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="StartWork" Title="Start Work" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenDatePicker  @bind-Value="workPlan.StartWork" Style="width:200px; display: block" Name="StartWork"  />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="EndWork" Title="End Work" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenDatePicker @bind-Value="workPlan.EndWork" Style="width:200px; display: block" Name="EndWork"  />
                    </EditTemplate>
                </RadzenDataGridColumn>

                
                <RadzenDataGridColumn TItem="LineWorkPlan" Width="px" Property="Priority" Title="Priority" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenNumeric @bind-Value="workPlan.Priority" Style="width:100px; display: block" Name="EndWork" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="DeadLineDateTime" Title="DueDate" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenDatePicker @bind-Value="workPlan.DeadLineDateTime" Style="width:200px; display: block" Name="EndWork" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="FormatedWorkDuration" Title="Work Duration" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan" >
                        <RadzenTextBox  @bind-Value="workPlan.FormatedWorkDuration" Style="width:200px; display: block" Name="FormatedWorkDuration"  />
                    </EditTemplate>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="QuantityInKg" Title="Quantity (Kg)" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenNumeric @bind-Value="workPlan.QuantityInKg" Style="width:100%; display: block;" Name="QuantityInKg" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="ProductDesc" Title="ProductDesc" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenTextBox @bind-Value="workPlan.ProductDesc" Style="width:200px; display: block" Name="ProductDesc" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="WorkOrderSN" Title="Work Order SN" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenTextBox @bind-Value="workPlan.WorkOrderSN" Style="width:200px; display: block" Name="WorkOrderSN" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="LineWorkPlan" Width="150px" Property="Comments" Title="Comments" Frozen="IsCrudFrozen">
                    <EditTemplate Context="workPlan">
                        <RadzenTextBox @bind-Value="workPlan.Comments" Style="width:200px; display: block" Name="Comments" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                @if (!IsCrudFrozen)
                {
                    <RadzenDataGridColumn Width="150px" TItem="LineWorkPlan" Context="workPlan" Filterable="false" Sortable="false"
                                          TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="workPlan">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(workPlan))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(workPlan))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="workPlan">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(workPlan))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(workPlan))">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(workPlan))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                }
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {


    [Parameter]
    public List<LineWorkPlan>? Data { get; set; } = new();

    private DataGridEditMode editMode = DataGridEditMode.Single;
    private RadzenDataGrid<LineWorkPlan>? workPlansGrid = new();
    private List<LineWorkPlan> workPlansToInsert = new List<LineWorkPlan>();
    private List<LineWorkPlan> workPlansToUpdate = new List<LineWorkPlan>();
    private List<LineWorkPlan>? fetchedworkPlans;
    private LineWorkPlan selectedOne = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    //not used 
    private async Task AddWorkPlan(LineWorkPlan workPlan)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("uploadinfo/postnewworkPlan", workPlan);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess("The data is added successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private async Task UpdateWorkPlan(LineWorkPlan workPlan)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("uploadinfo/updateworkplan", workPlan);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess("The data is updated successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private async Task RemoveWorkPlan(LineWorkPlan workPlan)
    {
        try
        {
            using var data = await Http.PostAsJsonAsync("uploadinfo/removeworkplan", workPlan);
            var message = data.Content.ReadFromJsonAsync<string>();
            toastService.ShowSuccess(message.Result);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private void Reset()
    {
        workPlansToInsert.Clear();
        workPlansToUpdate.Clear();
    }

    private void Reset(LineWorkPlan workPlan)
    {
        workPlansToInsert.Remove(workPlan);
        workPlansToUpdate.Remove(workPlan);
    }

    private async Task EditRow(LineWorkPlan workPlan)
    {
        if (editMode == DataGridEditMode.Single && workPlansToInsert.Count() > 0)
        {
            Reset();
        }

        workPlansToUpdate.Add(workPlan);
        await workPlansGrid.EditRow(workPlan);
    }

    private void OnUpdateRow(LineWorkPlan workPlan)
    {
        Reset(workPlan);
    }

    private async Task SaveRow(LineWorkPlan workPlan)
    {
        if (workPlan.Id == 0)
        {
            await workPlansGrid.UpdateRow(workPlan);
            await AddWorkPlan(workPlan);
            return;
        }

        await workPlansGrid.UpdateRow(workPlan);
        await UpdateWorkPlan(workPlan);
    }

    private void CancelEdit(LineWorkPlan workPlan)
    {
        Reset(workPlan);
        workPlansGrid.CancelEditRow(workPlan);
    }

    private async Task DeleteRow(LineWorkPlan workPlan)
    {
        Reset(workPlan);

        if (Data.Contains(workPlan))
        {
            Data.Remove(workPlan);

            if (workPlan.Id != 0)
                await RemoveWorkPlan(workPlan);
        }
        await workPlansGrid.Reload();
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var workPlan = new LineWorkPlan();
        selectedOne = workPlan;
        // workPlansToInsert.Add(selectedOne);
        //await workPlanGrid.InsertRow(selectedOne);
        // await workPlanGrid.Reload();
    }

    private void OnCreateRow(LineWorkPlan workPlan)
    {
        workPlansToInsert.Remove(workPlan);
    }

    // public void RefreshTable()
    // {
    //     workPlanGrid?.Reload();
    // }

    public string ConvertDoubleToTimeFormat(double time)
    {
       
        int hours = (int)time;

        double fractionalPart = time - hours;

        int minutes = (int)(fractionalPart * 60);

        string formattedHours = $"({hours:D2})";

        string formattedMinutes = $"{minutes:D2}:00";

        return $"{formattedHours}+ {formattedMinutes}";
    }

}
