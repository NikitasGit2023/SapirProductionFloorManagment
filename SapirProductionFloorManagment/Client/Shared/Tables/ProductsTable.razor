@inherits TableBase

@using SapirProductionFloorManagment.Client.Shared
@using SapirProductionFloorManagment.Client.Shared.Buttons


<div class="d-flex flex-row-reverse">
    <div class="p-2">
        <RadzenStack Visible="(IsCrudFrozen==false && IsVisible==true)" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
            <AddRowButton Text="Add Product" OnClick="InsertRow" Disabled="(editMode == DataGridEditMode.Single && productsToInsert.Count() > 0)" />
        </RadzenStack>
    </div>
</div>
   



<RadzenDataGrid Visible="IsVisible" @ref="productsGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                AllowSorting="true" Data="@products" TItem="Product" ColumnWidth="200px"
                SelectionMode="DataGridSelectionMode.Single">
    <Columns>

        <RadzenDataGridColumn TItem="Product" Property="ProductSN" Title="Product SN" Frozen="IsCrudFrozen">
            <EditTemplate Context="product">
                <RadzenNumeric @bind-Value="product.ProductSN" Style="width:200px; display: block" Name="Product SN" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Product" Property="ProductName" Title="Product Name" Filterable="false" Frozen="IsCrudFrozen">
            <EditTemplate Context="product">
                <RadzenTextBox @bind-Value="product.ProductName" Style="width:200px; display: block" Name="Product Name" />
            </EditTemplate>
        </RadzenDataGridColumn>

        @if (!IsCrudFrozen)
        {
            @*from here crud buttons*@
            <RadzenDataGridColumn TItem="Product" Context="Product" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="product">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(product))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(product))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="product">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(product))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(product))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(product))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>  
        }

    </Columns>

</RadzenDataGrid>

@code {

    DataGridEditMode editMode = DataGridEditMode.Single;
    RadzenDataGrid<Product>? productsGrid;
    List<Product> productsToInsert = new List<Product>();
    List<Product> productsToUpdate = new List<Product>();

    List<Product> fetchedproducts = new();
    IEnumerable<Product>? products;
    protected Product product = new();


    protected override async Task OnInitializedAsync()
    {
        fetchedproducts.Add(new Product
            {
                ProductSN = 258999875,
                ProductName = "Tesla Car"
            });

        products = fetchedproducts;

        await base.OnInitializedAsync();
    }

    private void Reset()
    {
        productsToInsert.Clear();
        productsToUpdate.Clear();
    }

    private void Reset(Product product)
    {
        productsToInsert.Remove(product);
        productsToUpdate.Remove(product);
    }



    private async Task EditRow(Product product)
    {
        if (editMode == DataGridEditMode.Single && productsToInsert.Count() > 0)
        {
            Reset();
        }

        productsToUpdate.Add(product);
        await productsGrid.EditRow(product);
    }

    void OnUpdateRow(Product product)
    {
        Reset(product);

        //dbCon upate

        //dbCon save
    }



    async Task SaveRow(Product product)
    {
        await productsGrid.UpdateRow(product);
    }

    void CancelEdit(Product product)
    {
        Reset(product);

        productsGrid.CancelEditRow(product);

        //TODO
        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }

    private async Task DeleteRow(Product product)
    {
        Reset(product);

        if (products.Contains(product))
        {
            // dbCon remove

            //dbCon save

            await productsGrid.Reload();
        }
        else
        {
            productsGrid.CancelEditRow(product);
            await productsGrid.Reload();
        }
    }

    private async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var product = new Product();
        productsToInsert.Add(product);
        await productsGrid.InsertRow(product);
    }


    private void OnCreateRow(Product product)
    {
        //dbCon Add
        //dbCon save
        productsToInsert.Remove(product);
    }


    //to do a vocabulary to hours


}
