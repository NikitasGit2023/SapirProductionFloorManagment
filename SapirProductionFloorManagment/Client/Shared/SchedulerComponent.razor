
@using Radzen
@using Radzen.Blazor
@inject HttpClient Http
@inject TooltipService TooltipService
@inject DialogService DialogService
@inject IToastService ToastService

<h3>Production Schedule</h3>

<RadzenDropDown Data="linesWithAllOption" TextProperty="Name" ValueProperty="Name" @bind-Value="selectedLine"
                Placeholder="Select Line" style="width: 200px;" />

<RadzenScheduler @ref="scheduler" TItem="Appointment" Data="filteredAppointments"
                 StartProperty="Start" EndProperty="End" TextProperty="Text"
                 SlotRender="OnSlotRender" AppointmentRender="OnAppointmentRender"
                 AppointmentSelect="OnAppointmentSelect"
                 style="height: 768px;">
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

@code {
    RadzenScheduler<Appointment> scheduler;
    IList<Appointment> appointments = new List<Appointment>(); 
    IList<Appointment> filteredAppointments => GetFilteredAppointments();

    List<Line> lines = new List<Line>();
    List<Line> linesWithAllOption = new List<Line>(); 
    string selectedLine = "All Lines"; 

    bool isAppointmentsLoaded = false; 

    public class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
        public string RelatedToLine { get; set; }
        public int QuantityInKg { get; set; } 
    }


    string GetGradientColor(int value, int minValue, int maxValue)
    {
        var green = (r: 0, g: 255, b: 0);
        var red = (r: 255, g: 0, b: 0);
        double ratio = (double)(value - minValue) / (maxValue - minValue);
        int r = (int)(green.r + (red.r - green.r) * ratio);
        int g = (int)(green.g + (red.g - green.g) * ratio);
        int b = (int)(green.b + (red.b - green.b) * ratio);
        return $"rgb({r},{g},{b})";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadLines();
        await LoadAppointments();

     
        if (lines != null && lines.Count > 0)
        {
            linesWithAllOption = lines.ToList();
            linesWithAllOption.Insert(0, new Line { Name = "All Lines" });
        }

      
        isAppointmentsLoaded = true;
        await scheduler.Reload();  
    }

    async Task LoadLines()
    {
        try
        {
            lines = await Http.GetFromJsonAsync<List<Line>>("/LineWorkPlan/GetLines");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lines: {ex.Message}");
        }
    }

    async Task LoadAppointments()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<LineWorkPlan>>("/LineWorkPlan/GetWorkSchedule");
            if (response != null)
            {
                foreach (var item in response)
                {
                 
                    if (item.StartWork.HasValue && item.EndWork.HasValue)
                    {
                        appointments.Add(new Appointment
                            {
                                Start = item.StartWork.Value, 
                                End = item.EndWork.Value,
                                Text = item.WorkOrderSN,
                                RelatedToLine = item.RelatedToLine,
                                QuantityInKg = item.QuantityInKg
                            });
                    }
                    else
                    {
                        Console.WriteLine("StartWork or EndWork is null for work order: " + item.WorkOrderSN);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appointments: {ex.Message}");
        }
    }

   
    IList<Appointment> GetFilteredAppointments()
    {
        var filtered = selectedLine == "All Lines"
            ? appointments
            : appointments.Where(a => a.RelatedToLine == selectedLine).ToList();

   
        if (isAppointmentsLoaded && !filtered.Any())
        {
            var lineMessage = selectedLine == "All Lines" ? "all lines" : $"line {selectedLine}";
            ToastService.ShowInfo($"No appointments available for {lineMessage}.");
        }

        return filtered;
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (args.View.Text == "Week" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,0.2);"; 
        }

   
        if ((args.View.Text == "Day" || args.View.Text == "Week") && args.Start.Hour >= 9 && args.Start.Hour < 18)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,0.1);";
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
    
        string color = GetGradientColor(args.Data.QuantityInKg, 0, 25000);
        args.Attributes["style"] = $"background: {color};";
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        if (data != null)
        {
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
            args.Data.QuantityInKg = data.QuantityInKg;
            await scheduler.Reload();
        }
    }
}
